( define ( domain freecell ) ( :requirements :strips :typing ) ( :types card num suit ) ( :predicates ( on ?c1 - card ?c2 - card ) ( incell ?c - card ) ( clear ?c - card ) ( cellspace ?n - num ) ( colspace ?n - num ) ( home ?c - card ) ( bottomcol ?c - card ) ( canstack ?c1 - card ?c2 - card ) ( suit ?c - card ?s - suit ) ( value ?c - card ?v - num ) ( successor ?n1 - num ?n0 - num ) ) ( :action move :parameters ( ?card ?oldcard ?newcard - card ) :precondition ( and ( clear ?card ) ( clear ?newcard ) ( canstack ?card ?newcard ) ( on ?card ?oldcard ) ) :effect ( and ( on ?card ?newcard ) ( clear ?oldcard ) ) ) ( :action move-b :parameters ( ?card ?newcard - card ?cols ?ncols - num ) :precondition ( and ( clear ?card ) ( bottomcol ?card ) ( clear ?newcard ) ( canstack ?card ?newcard ) ( colspace ?cols ) ( successor ?ncols ?cols ) ) :effect ( and ( on ?card ?newcard ) ( colspace ?ncols ) ) ) ( :action sendtofree :parameters ( ?card ?oldcard - card ?cells ?ncells - num ) :precondition ( and ( clear ?card ) ( on ?card ?oldcard ) ( cellspace ?cells ) ( successor ?cells ?ncells ) ) :effect ( and ( incell ?card ) ( clear ?oldcard ) ( cellspace ?ncells ) ) ) ( :action sendtofree-b :parameters ( ?card - card ?cells ?ncells ?cols ?ncols - num ) :precondition ( and ( clear ?card ) ( bottomcol ?card ) ( cellspace ?cells ) ( successor ?cells ?ncells ) ( colspace ?cols ) ( successor ?ncols ?cols ) ) :effect ( and ( incell ?card ) ( colspace ?ncols ) ( cellspace ?ncells ) ) ) ( :action sendtonewcol :parameters ( ?card ?oldcard - card ?cols ?ncols - num ) :precondition ( and ( clear ?card ) ( colspace ?cols ) ( successor ?cols ?ncols ) ( on ?card ?oldcard ) ) :effect ( and ( bottomcol ?card ) ( clear ?oldcard ) ( colspace ?ncols ) ) ) ( :action sendtohome :parameters ( ?card ?oldcard - card ?suit - suit ?vcard - num ?homecard - card ?vhomecard - num ) :precondition ( and ( clear ?card ) ( on ?card ?oldcard ) ( home ?homecard ) ( suit ?card ?suit ) ( suit ?homecard ?suit ) ( value ?card ?vcard ) ( value ?homecard ?vhomecard ) ( successor ?vcard ?vhomecard ) ) :effect ( and ( home ?card ) ( clear ?oldcard ) ) ) ( :action sendtohome-b :parameters ( ?card - card ?suit - suit ?vcard - num ?homecard - card ?vhomecard - num ?cols ?ncols - num ) :precondition ( and ( clear ?card ) ( bottomcol ?card ) ( home ?homecard ) ( suit ?card ?suit ) ( suit ?homecard ?suit ) ( value ?card ?vcard ) ( value ?homecard ?vhomecard ) ( successor ?vcard ?vhomecard ) ( colspace ?cols ) ( successor ?ncols ?cols ) ) :effect ( and ( home ?card ) ( colspace ?ncols ) ) ) ( :action homefromfreecell :parameters ( ?card - card ?suit - suit ?vcard - num ?homecard - card ?vhomecard - num ?cells ?ncells - num ) :precondition ( and ( incell ?card ) ( home ?homecard ) ( suit ?card ?suit ) ( suit ?homecard ?suit ) ( value ?card ?vcard ) ( value ?homecard ?vhomecard ) ( successor ?vcard ?vhomecard ) ( cellspace ?cells ) ( successor ?ncells ?cells ) ) :effect ( and ( home ?card ) ( cellspace ?ncells ) ) ) ( :action colfromfreecell :parameters ( ?card ?newcard - card ?cells ?ncells - num ) :precondition ( and ( incell ?card ) ( clear ?newcard ) ( canstack ?card ?newcard ) ( cellspace ?cells ) ( successor ?ncells ?cells ) ) :effect ( and ( cellspace ?ncells ) ( clear ?card ) ( on ?card ?newcard ) ) ) ( :action newcolfromfreecell :parameters ( ?card - card ?cols ?ncols ?cells ?ncells - num ) :precondition ( and ( incell ?card ) ( colspace ?cols ) ( cellspace ?cells ) ( successor ?cols ?ncols ) ( successor ?ncells ?cells ) ) :effect ( and ( bottomcol ?card ) ( clear ?card ) ( colspace ?ncols ) ( cellspace ?ncells ) ) ) )